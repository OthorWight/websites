<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Baker's Percentage Calculator V2 - Enhanced</title>
    <style>
        /* --- CSS Variables for Theming --- */
        :root {
            /* Existing variables... */
            --bg-color: #f8f9fa;
            --text-color: #333;
            --card-bg: #ffffff;
            --input-bg: #ffffff;
            --input-border: #ced4da;
            --input-focus-border: #80bdff; /* Adjusted for glow */
            --input-focus-shadow: rgba(0, 123, 255, 0.25);
            --primary-color: #007bff;
            --primary-hover-color: #0056b3;
            --secondary-color: #6c757d;
            --secondary-hover-color: #5a6268;
            --danger-color: #dc3545;
            --danger-hover-color: #c82333;
            --border-color: #e9ecef;
            --link-color: #007bff;
            --label-color: #495057;
            --heading-color: #343a40;
            --subtle-text-color: #6c757d;
            --results-span-color: #343a40;

            /* --- NEW: Variables for Effects --- */
            --glow-color: var(--primary-color);
            --glow-shadow: rgba(0, 123, 255, 0.5); /* Slightly stronger shadow for glow */
            --button-hover-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            --gradient-start: #eef4ff; /* Subtle gradient start */
            --gradient-end: #fdfdff;   /* Subtle gradient end */
        }

        /* --- Dark Mode --- */
        body.dark-mode {
            /* Existing variables... */
            --bg-color: #212529;
            --text-color: #e9ecef;
            --card-bg: #343a40;
            --input-bg: #495057;
            --input-border: #6c757d;
            --input-focus-border: #adb5bd; /* Adjusted for glow */
            --input-focus-shadow: rgba(173, 181, 189, 0.35); /* Adjusted for glow */
            --primary-color: #0d6efd;
            --primary-hover-color: #0b5ed7;
            --secondary-color: #6c757d;
            --secondary-hover-color: #5c636a;
            --danger-color: #dc3545;
            --danger-hover-color: #bb2d3b;
            --border-color: #495057;
            --link-color: #6ea8fe;
            --label-color: #ced4da;
            --heading-color: #f8f9fa;
            --subtle-text-color: #adb5bd;
            --results-span-color: #e9ecef;

            /* --- NEW: Dark Mode Effect Variables --- */
            --glow-color: #6ea8fe;
            --glow-shadow: rgba(110, 168, 254, 0.4);
            --button-hover-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            --gradient-start: #2a2f34; /* Subtle dark gradient start */
            --gradient-end: #343a40;   /* Subtle dark gradient end */
        }

        /* Basic Reset & Font */
        * { box-sizing: border-box; margin: 0; padding: 0; }
        html { /* Added for smooth scroll if page gets longer */
            scroll-behavior: smooth;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            line-height: 1.6;
            background-color: var(--bg-color);
            /* --- NEW: Subtle Animated Gradient Background --- */
            background: linear-gradient(135deg, var(--bg-color), var(--gradient-start));
            background-size: 200% 200%; /* Make gradient larger */
            animation: subtleGradientShift 15s ease infinite; /* Animate */
            /* --- END NEW --- */
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            padding: 20px;
            transition: background-color 0.4s ease, color 0.3s ease; /* Slightly longer bg transition */
        }

        /* --- NEW: Keyframes for Background Animation --- */
        @keyframes subtleGradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        /* --- END NEW --- */


        /* Main Container */
        .calculator-container {
            background-color: var(--card-bg);
            padding: 30px 40px;
            border-radius: 12px; /* Slightly more rounded */
            box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1); /* Enhanced shadow */
            max-width: 900px;
            width: 100%;
            /* --- NEW: Subtle Border & Transition --- */
            border: 1px solid var(--border-color);
            transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
            position: relative; /* Needed for potential pseudo-element effects */
            overflow: hidden; /* Needed for some effects */
            /* --- END NEW --- */
        }
        /* --- NEW: Optional Subtle Glow Effect on Container --- */
        .calculator-container::before {
            content: '';
            position: absolute;
            top: 0; left: 0; right: 0; bottom: 0;
            border-radius: inherit; /* Match parent border-radius */
            padding: 1px; /* Control the border thickness */
            background: linear-gradient(135deg, var(--primary-color), transparent, var(--secondary-color));
            -webkit-mask: /* Use -webkit-mask for broader compatibility */
                linear-gradient(#fff 0 0) content-box,
                linear-gradient(#fff 0 0);
            mask:
                linear-gradient(#fff 0 0) content-box,
                linear-gradient(#fff 0 0);
            -webkit-mask-composite: destination-out; /* Use prefix for broader compatibility */
            mask-composite: exclude;
            opacity: 0;
            transition: opacity 0.4s ease;
            pointer-events: none; /* Don't interfere with clicks */
            z-index: -1; /* Behind content */
        }
        .calculator-container:hover::before {
            opacity: 0.5; /* Show subtle gradient border on hover */
        }
        /* --- END NEW --- */


        /* Header Area */
        .header-area {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px; /* Reduced margin */
            padding-bottom: 15px; /* Add padding for border */
            border-bottom: 1px solid var(--border-color); /* Add a separator */
            flex-wrap: wrap;
            transition: border-color 0.3s ease;
        }
        .header-area h1 {
            text-align: left;
            color: var(--heading-color);
            margin-bottom: 0;
            font-size: 1.8rem;
            /* --- NEW: Subtle Text Shadow --- */
            text-shadow: 1px 1px 2px rgba(0,0,0,0.05);
            body.dark-mode & { /* Different shadow for dark mode */
                text-shadow: 1px 1px 3px rgba(0,0,0,0.3);
            }
            /* --- END NEW --- */
        }

        /* Dark Mode Toggle */
        .dark-mode-toggle {
            display: flex;
            align-items: center;
            cursor: pointer;
            margin-left: auto;
            padding: 5px 0;
        }
        .dark-mode-toggle label {
            margin-right: 8px;
            font-size: 0.9em;
            color: var(--subtle-text-color);
            user-select: none; /* Prevent text selection */
            -webkit-user-select: none; /* Safari */
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* IE/Edge */
        }
        /* --- ENHANCED Toggle Switch --- */
        .switch {
            position: relative;
            display: inline-block;
            width: 44px; /* Slightly wider */
            height: 24px; /* Slightly taller */
        }
        .switch input { opacity: 0; width: 0; height: 0; }
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0; left: 0; right: 0; bottom: 0;
            background-color: #ccc;
            transition: .4s cubic-bezier(0.68, -0.55, 0.27, 1.55); /* Bouncier transition */
            border-radius: 24px; /* Fully rounded */
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.2); /* Inner shadow */
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 18px; /* Larger handle */
            width: 18px;
            left: 3px; bottom: 3px;
            background-color: white;
            transition: .4s cubic-bezier(0.68, -0.55, 0.27, 1.55); /* Bouncier transition */
            border-radius: 50%;
            box-shadow: 0 1px 3px rgba(0,0,0,0.3); /* Handle shadow */
        }
        input:checked + .slider { background-color: var(--primary-color); }
        input:checked + .slider:before { transform: translateX(20px); }
        /* --- END ENHANCED Toggle --- */

        .description {
            text-align: center;
            color: var(--subtle-text-color);
            margin-bottom: 30px;
            font-size: 0.95em;
            /* --- NEW: Added some top margin --- */
            margin-top: 5px;
        }

        /* --- Two Column Layout --- */
        .calculator-body { display: flex; gap: 40px; align-items: flex-start; }
        .input-column, .results-column { flex: 1; min-width: 0; }

        /* Form Styling (Input Column) */
        #baker-form { display: flex; flex-direction: column; gap: 20px; /* Slightly more gap */ }
        .input-group { display: flex; flex-direction: column; position: relative; /* Needed for potential label animations */ }
        .input-group label {
            margin-bottom: 6px; /* More space */
            font-weight: 500;
            color: var(--label-color);
            font-size: 0.9em; /* Slightly smaller label */
            transition: color 0.3s ease;
        }
        .input-group input[type="text"],
        .input-group input[type="number"],
        .input-group select {
            padding: 12px 15px; /* More padding */
            border: 1px solid var(--input-border);
            background-color: var(--input-bg);
            color: var(--text-color);
            border-radius: 6px; /* Slightly more rounded */
            font-size: 1rem;
            width: 100%;
            /* --- NEW: Smoother Transitions & Subtle Shadow --- */
            transition: border-color 0.3s ease, background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);
            /* --- END NEW --- */
        }
        .input-group input[type="text"]:focus,
        .input-group input[type="number"]:focus,
        .input-group select:focus {
            outline: none;
            border-color: var(--glow-color); /* Use glow color */
            /* --- NEW: Animated Glow Effect --- */
            box-shadow: 0 0 0 3px var(--input-focus-shadow), 0 0 8px var(--glow-shadow), inset 0 1px 2px rgba(0,0,0,0.05);
            animation: inputGlow 1.5s infinite alternate;
            /* --- END NEW --- */
        }
        /* --- NEW: Keyframes for Input Glow --- */
        @keyframes inputGlow {
            from { box-shadow: 0 0 0 3px var(--input-focus-shadow), 0 0 5px var(--glow-shadow), inset 0 1px 2px rgba(0,0,0,0.05); }
            to   { box-shadow: 0 0 0 4px var(--input-focus-shadow), 0 0 12px var(--glow-shadow), inset 0 1px 2px rgba(0,0,0,0.05); }
        }
        /* --- END NEW --- */

        .input-group small { font-size: 0.8em; color: var(--subtle-text-color); margin-top: 5px; /* More space */ }

        /* Results Area Styling */
        #results-container {
            border-left: 1px solid var(--border-color);
            padding-left: 40px;
            transition: border-color 0.3s ease;
        }
        #results-container h2 {
            margin-bottom: 20px; /* More space */
            color: var(--heading-color);
            font-size: 1.3rem;
            border-bottom: 1px solid var(--border-color); /* Underline heading */
            padding-bottom: 10px;
            transition: border-color 0.3s ease;
        }
        #results-list { list-style: none; padding: 0; margin-bottom: 20px; }
        #results-list li {
            margin-bottom: 12px; /* More space */
            font-size: 1rem;
            color: var(--text-color);
            display: flex;
            justify-content: space-between;
            align-items: center; /* Align items vertically */
            padding: 8px 5px; /* Add some padding */
            border-bottom: 1px dashed var(--border-color);
            transition: border-color 0.3s ease, background-color 0.2s ease;
            border-radius: 4px; /* Slight rounding */
        }
        /* --- NEW: Hover effect for list items --- */
        #results-list li:hover {
            background-color: rgba(0, 123, 255, 0.05); /* Subtle primary highlight */
            body.dark-mode & {
                background-color: rgba(110, 168, 254, 0.1);
            }
        }
        /* --- END NEW --- */
        #results-list li:last-child { border-bottom: none; }
        #results-list li strong { color: var(--heading-color); margin-right: 10px; flex-shrink: 0; } /* Prevent shrinking */
        #results-list li span {
            font-weight: 600; /* Bolder result numbers */
            min-width: 60px; /* Ensure alignment */
            text-align: right;
            color: var(--results-span-color);
            background-color: transparent; /* Ensure base is transparent */
            /* --- NEW: Transition for potential JS highlights --- */
            transition: background-color 0.4s ease, color 0.3s ease, transform 0.3s ease, padding 0.3s ease;
            display: inline-block; /* Needed for transform and padding */
            border-radius: 3px; /* Add base radius for smooth transition */
            padding: 0 5px; /* Add base padding */
            margin-left: 5px; /* Ensure space from label */
            /* --- END NEW --- */
        }
        /* --- NEW: Class for JS to add on update --- */
        #results-list li span.highlight-update {
            background-color: var(--primary-color); /* Flash background */
            color: white;
            body.dark-mode & { color: var(--card-bg); } /* Ensure contrast in dark mode */
            /* padding: 2px 5px; Slightly more padding during highlight */
            transform: scale(1.1); /* Slightly pop */
            box-shadow: 0 0 8px var(--primary-color); /* Add glow during highlight */
        }
        /* --- END NEW --- */


        #results-container p { font-size: 1rem; /* Match list items */ color: var(--text-color); margin-bottom: 10px; }
        #results-container p span { font-weight: 600; color: var(--results-span-color); }
        #results-container hr {
            border: 0;
            height: 2px; /* Thicker HR */
            /* --- NEW: Gradient HR --- */
            background-image: linear-gradient(to right, transparent, var(--primary-color), transparent);
            opacity: 0.6;
            /* --- END NEW --- */
            margin: 20px 0;
            transition: opacity 0.3s ease;
            body.dark-mode & {
                background-image: linear-gradient(to right, transparent, var(--glow-color), transparent); /* Use glow color in dark mode */
            }
        }

        /* Error Message */
        .error {
            color: var(--danger-color);
            background-color: rgba(220, 53, 69, 0.1); /* Subtle background */
            border: 1px dashed var(--danger-color);
            padding: 8px 12px;
            border-radius: 4px;
            font-weight: 500;
            margin-top: 10px;
            min-height: 1.5em;
            font-size: 0.9em;
            opacity: 0; /* Start hidden */
            max-height: 0; /* Start collapsed */
            overflow: hidden;
            /* --- NEW: Fade/Slide Animation --- */
            transition: opacity 0.4s ease, max-height 0.4s ease, margin-top 0.4s ease, padding 0.4s ease, border 0.4s ease;
            /* --- END NEW --- */
        }
        /* --- NEW: Style for visible error --- */
        .error:not(:empty) { /* Apply only when it has content */
            opacity: 1;
            max-height: 100px; /* Allow space to expand */
            margin-top: 15px; /* Add margin when visible */
            padding: 8px 12px;
            border: 1px dashed var(--danger-color); /* Ensure border is visible */
        }
        /* --- END NEW --- */


        /* Buttons */
        button {
            padding: 10px 18px; /* Slightly more padding */
            font-size: 0.95rem;
            font-weight: 600; /* Bolder text */
            border-radius: 6px; /* Match inputs */
            cursor: pointer;
            border: 1px solid transparent;
            /* --- NEW: Enhanced Transitions & Hover --- */
            transition: background-color 0.25s ease, border-color 0.25s ease, color 0.25s ease, transform 0.15s ease, box-shadow 0.25s ease;
            margin-right: 8px; /* More space */
            margin-top: 5px;
            position: relative; /* For potential pseudo-elements or transforms */
            overflow: hidden; /* For ripple effect if added later */
            box-shadow: 0 2px 4px rgba(0,0,0,0.05); /* Subtle base shadow */
            /* --- END NEW --- */
        }
        button:hover {
            /* --- NEW: Hover Transform & Shadow --- */
            transform: translateY(-2px);
            box-shadow: var(--button-hover-shadow);
            /* --- END NEW --- */
        }
        button:active {
            /* --- NEW: Active State --- */
            transform: translateY(0px) scale(0.98); /* Press down effect */
            box-shadow: 0 1px 2px rgba(0,0,0,0.1); /* Smaller shadow when pressed */
            /* --- END NEW --- */
        }
        button:last-child { margin-right: 0; }

        .btn-primary { background-color: var(--primary-color); color: #fff; border-color: var(--primary-color); }
        .btn-primary:hover { background-color: var(--primary-hover-color); border-color: var(--primary-hover-color); color: #fff; }
        .btn-secondary { background-color: var(--secondary-color); color: #fff; border-color: var(--secondary-color); }
        .btn-secondary:hover { background-color: var(--secondary-hover-color); border-color: var(--secondary-hover-color); color: #fff; }
        .btn-danger { background-color: var(--danger-color); color: #fff; border-color: var(--danger-color); }
        .btn-danger:hover { background-color: var(--danger-hover-color); border-color: var(--danger-hover-color); color: #fff; }
        .btn-outline-secondary { background-color: transparent; color: var(--secondary-color); border-color: var(--secondary-color); }
        .btn-outline-secondary:hover { background-color: var(--secondary-color); color: #fff; border-color: var(--secondary-color); } /* Keep border color */


        /* Action Sections */
        .actions-section {
            border-top: 1px solid var(--border-color);
            margin-top: 30px; /* More separation */
            padding-top: 30px;
            transition: border-color 0.3s ease;
        }
        .actions-section h3 {
            font-size: 1.2rem; /* Slightly larger */
            color: var(--heading-color);
            margin-bottom: 20px; /* More space */
        }
        .action-group {
            display: flex;
            align-items: center;
            gap: 15px; /* More gap */
            flex-wrap: wrap;
            margin-bottom: 20px; /* More space */
        }
        .action-group input[type="text"],
        .action-group input[type="number"],
        .action-group select {
            flex-grow: 1;
            min-width: 150px; /* Wider min-width */
            /* --- NEW: Apply input styles here too --- */
            padding: 12px 15px;
            border: 1px solid var(--input-border);
            background-color: var(--input-bg);
            color: var(--text-color);
            border-radius: 6px;
            font-size: 1rem;
            transition: border-color 0.3s ease, background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);
            /* --- END NEW --- */
        }
        /* --- NEW: Apply focus styles here too --- */
        .action-group input[type="text"]:focus,
        .action-group input[type="number"]:focus,
        .action-group select:focus {
            outline: none;
            border-color: var(--glow-color);
            box-shadow: 0 0 0 3px var(--input-focus-shadow), 0 0 8px var(--glow-shadow), inset 0 1px 2px rgba(0,0,0,0.05);
            animation: inputGlow 1.5s infinite alternate;
        }
        /* --- END NEW --- */

        .action-group button {
            flex-shrink: 0;
        }

        /* --- Responsive --- */
        @media (max-width: 768px) {
            .calculator-body { flex-direction: column; gap: 30px; }
            .results-column {
                padding-left: 0;
                border-left: none;
                border-top: 1px solid var(--border-color);
                padding-top: 30px;
                margin-top: 20px; /* Add margin when stacked */
            }
            #results-container { /* Remove left border/padding when stacked */
                border-left: none;
                padding-left: 0;
            }
            .calculator-container { padding: 25px; }
            .header-area h1 { font-size: 1.6rem; }
            .header-area { justify-content: center; }
            .dark-mode-toggle { margin-left: 0; margin-top: 15px; width: 100%; justify-content: center;}
            /* --- NEW: Adjust gradient animation on smaller screens if needed --- */
            body { animation-duration: 20s; /* Slower on mobile? */ }
        }
        @media (max-width: 480px) {
            .action-group { flex-direction: column; align-items: stretch; gap: 12px; }
            .action-group input, .action-group select, .action-group button { width: 100%; margin-right: 0; }
            .header-area h1 { font-size: 1.4rem; }
            .calculator-container { padding: 20px; }
            .input-group input[type="text"],
            .input-group input[type="number"],
            .input-group select,
            .action-group input[type="text"],
            .action-group input[type="number"],
            .action-group select {
                padding: 10px 12px; /* Slightly less padding on mobile */
            }
            button { padding: 10px 15px; }
            #results-list li { flex-wrap: wrap; } /* Allow wrapping within result items */
            #results-list li strong { margin-bottom: 3px; } /* Add space if wrapped */
            #results-list li span { min-width: 50px; } /* Reduce min-width slightly */
        }

        /* --- CSS Ends --- */
    </style>
</head>
<body>

    <div class="calculator-container">
        <div class="header-area">
            <h1>Baker's Calculator</h1>
            <div class="dark-mode-toggle">
                <label for="darkModeToggle">Dark Mode</label>
                <label class="switch">
                    <input type="checkbox" id="darkModeToggle">
                    <span class="slider"></span>
                </label>
            </div>
        </div>
        <p class="description">Values auto-save. Use formulas (e.g., 8*50) for final weight. Manage recipes & scale below.</p>

        <div class="calculator-body">
            <!-- Column 1: Inputs -->
            <div class="input-column">
                <form id="baker-form" onsubmit="return false;">
                    <div class="input-group">
                        <label for="finalWeight">Desired Final Dough Weight (g):</label>
                        <input type="text" id="finalWeight" placeholder="e.g., 1000 or 8*50" required>
                        <small>Enter weight or a simple formula (+, -, *, /)</small>
                    </div>
                    <div class="input-group"> <label for="hydration">Hydration (%):</label> <input type="number" id="hydration" value="65" step="1" min="0" required> </div>
                    <div class="input-group"> <label for="yeast">Yeast (%):</label> <input type="number" id="yeast" value="1.5" step="0.1" min="0" required> </div>
                    <div class="input-group"> <label for="salt">Salt (%):</label> <input type="number" id="salt" value="2" step="0.1" min="0" required> </div>
                    <div class="input-group"> <label for="sugar">Sugar (%):</label> <input type="number" id="sugar" value="0" step="0.5" min="0"> <small>(Optional)</small> </div>
                    <div class="input-group"> <label for="fat">Fat (%):</label> <input type="number" id="fat" value="0" step="0.5" min="0"> <small>(Optional)</small> </div>
                </form>
                <p id="error-message" class="error"></p>
                <button type="button" id="resetBtn" class="btn-outline-secondary" style="margin-top: 15px;">Reset Fields</button>
            </div>

            <!-- Column 2: Results -->
            <div class="results-column">
                <div id="results-container">
                    <h2>Ingredient Weights:</h2>
                    <ul id="results-list">
                        <li><strong>Flour:</strong> <span id="flour-weight">-</span> g</li>
                        <li><strong>Water:</strong> <span id="water-weight">-</span> g</li>
                        <li><strong>Yeast:</strong> <span id="yeast-weight">-</span> g</li>
                        <li><strong>Salt:</strong> <span id="salt-weight">-</span> g</li>
                        <li><strong>Sugar:</strong> <span id="sugar-weight">-</span> g</li>
                        <li><strong>Fat:</strong> <span id="fat-weight">-</span> g</li>
                    </ul>
                    <hr>
                    <p><strong>Total Percentage:</strong> <span id="total-percentage">-</span> %</p>
                    <p><strong>Calculated Total Weight:</strong> <span id="calculated-total-weight">-</span> g</p>
                </div>
            </div>
        </div> <!-- End calculator-body -->

        <!-- Action Sections Below Columns -->
        <div class="actions-section">
            <h3>Recipe Management</h3>
            <div class="action-group">
                <input type="text" id="recipeName" placeholder="Recipe Name">
                <button type="button" id="saveRecipeBtn" class="btn-primary">Save Current</button>
            </div>
            <div class="action-group">
                <select id="recipeSelect">
                    <option value="" disabled selected>-- Load or Delete Recipe --</option>
                    <!-- Options populated by JS -->
                </select>
                <button type="button" id="loadRecipeBtn" class="btn-secondary">Load Selected</button>
                <button type="button" id="deleteRecipeBtn" class="btn-danger">Delete Selected</button>
            </div>
        </div>

        <div class="actions-section">
            <h3>Scale Recipe</h3>
            <div class="action-group">
                <input type="number" id="scaleValue" placeholder="Factor or Weight (g)" step="any" min="0">
                <button type="button" id="scaleByFactorBtn" class="btn-secondary">Scale by Factor</button>
                <button type="button" id="scaleToTotalBtn" class="btn-secondary">Scale to Total (g)</button>
                <button type="button" id="scaleToFlourBtn" class="btn-secondary">Scale to Flour (g)</button>
            </div>
            <p id="scale-error-message" class="error"></p>
        </div>


    </div> <!-- End calculator-container -->

    <script>
        // --- JavaScript Starts ---
        document.addEventListener('DOMContentLoaded', () => {
            // --- Element References ---
            const finalWeightInput = document.getElementById('finalWeight');
            const hydrationInput = document.getElementById('hydration');
            const yeastInput = document.getElementById('yeast');
            const saltInput = document.getElementById('salt');
            const sugarInput = document.getElementById('sugar');
            const fatInput = document.getElementById('fat');
            const errorMessage = document.getElementById('error-message');
            const scaleErrorMessage = document.getElementById('scale-error-message');

            // Result Spans
            const flourWeightSpan = document.getElementById('flour-weight');
            const waterWeightSpan = document.getElementById('water-weight');
            const yeastWeightSpan = document.getElementById('yeast-weight');
            const saltWeightSpan = document.getElementById('salt-weight');
            const sugarWeightSpan = document.getElementById('sugar-weight');
            const fatWeightSpan = document.getElementById('fat-weight');
            const totalPercentageSpan = document.getElementById('total-percentage');
            const calculatedTotalWeightSpan = document.getElementById('calculated-total-weight');

            // List of spans to potentially highlight
            const resultSpans = [
                flourWeightSpan, waterWeightSpan, yeastWeightSpan,
                saltWeightSpan, sugarWeightSpan, fatWeightSpan,
                totalPercentageSpan, calculatedTotalWeightSpan
            ];

            // New Action Elements
            const resetBtn = document.getElementById('resetBtn');
            const recipeNameInput = document.getElementById('recipeName');
            const saveRecipeBtn = document.getElementById('saveRecipeBtn');
            const recipeSelect = document.getElementById('recipeSelect');
            const loadRecipeBtn = document.getElementById('loadRecipeBtn');
            const deleteRecipeBtn = document.getElementById('deleteRecipeBtn');
            const scaleValueInput = document.getElementById('scaleValue');
            const scaleByFactorBtn = document.getElementById('scaleByFactorBtn');
            const scaleToTotalBtn = document.getElementById('scaleToTotalBtn');
            const scaleToFlourBtn = document.getElementById('scaleToFlourBtn');
            const darkModeToggle = document.getElementById('darkModeToggle');

            // Define inputs for saving/loading/resetting
            const savableInputs = { // Use object for easier access by id
                finalWeight: finalWeightInput,
                hydration: hydrationInput,
                yeast: yeastInput,
                salt: saltInput,
                sugar: sugarInput,
                fat: fatInput
            };
            const inputIds = Object.keys(savableInputs);

            // Define built-in presets
            const PRESETS = {
                "Basic White Loaf": { finalWeight: "900", hydration: "65", yeast: "1.5", salt: "2", sugar: "1", fat: "2" },
                "Whole Wheat Loaf (50%)": { finalWeight: "950", hydration: "72", yeast: "1.5", salt: "2", sugar: "2", fat: "3" },
                "Sandwich Bread (Soft)": { finalWeight: "1000", hydration: "63", yeast: "1.8", salt: "2", sugar: "4", fat: "5" },
                "Simple Rye (Light)": { finalWeight: "900", hydration: "75", yeast: "1.2", salt: "2", sugar: "1", fat: "1" },
                "No-Knead (Basic)": { finalWeight: "850", hydration: "80", yeast: "0.2", salt: "2", sugar: "0", fat: "0" },
                "Sourdough Base (Low Yeast)": { finalWeight: "1000", hydration: "70", yeast: "0.1", salt: "2", sugar: "0", fat: "0" }, // Assumes starter provides leavening

                // --- Flatbreads & Italian ---
                "Simple Pizza Dough": { finalWeight: "600", hydration: "62", yeast: "0.5", salt: "2", sugar: "0", fat: "3" },
                "Ciabatta": { finalWeight: "800", hydration: "80", yeast: "0.3", salt: "2", sugar: "0", fat: "2" },
                "Focaccia": { finalWeight: "750", hydration: "78", yeast: "1.2", salt: "2", sugar: "0", fat: "8" },

                // --- Lean Doughs ---
                "Lean Baguette": { finalWeight: "1000", hydration: "68", yeast: "0.8", salt: "2", sugar: "0", fat: "0" },

                // --- Enriched Doughs ---
                "Rich Brioche": { finalWeight: "1000", hydration: "50", yeast: "2.5", salt: "1.5", sugar: "12", fat: "25" }, // Hydration lower due to other liquids/fats
                "Challah (Basic)": { finalWeight: "1100", hydration: "55", yeast: "1.8", salt: "1.8", sugar: "8", fat: "10" }, // Assumes eggs contribute liquid
                "Soft Dinner Rolls": { finalWeight: "700", hydration: "60", yeast: "2.0", salt: "1.8", sugar: "6", fat: "8" },

                // --- Specific Shapes ---
                "Bagels": { finalWeight: "1200", hydration: "55", yeast: "1.0", salt: "2", sugar: "2", fat: "1" }, // Malt often used
                "Soft Pretzels": { finalWeight: "800", hydration: "58", yeast: "1.5", salt: "1.5", sugar: "1", fat: "3" }, // Salt % is for dough itself

                // --- Utility ---
                "Default": { finalWeight: "", hydration: "65", yeast: "1.5", salt: "2", sugar: "0", fat: "0" } // For reset
            };
            const RECIPES_STORAGE_KEY = 'bakersCalcRecipes_v1'; // Key for saved recipes
            const DARK_MODE_KEY = 'bakersCalcDarkMode';

            // --- Local Storage Functions ---
            const ls = {
                get: (key, defaultValue = null) => {
                    try { const value = localStorage.getItem(key); return value !== null ? value : defaultValue; }
                    catch (e) { console.error("LS get error", e); return defaultValue; }
                },
                set: (key, value) => {
                    try { localStorage.setItem(key, value); }
                    catch (e) { console.error("LS set error", e); if(errorMessage) errorMessage.textContent = "Failed to save settings."; }
                },
                getObject: (key, defaultValue = null) => {
                    try { const value = localStorage.getItem(key); return value ? JSON.parse(value) : defaultValue; }
                    catch (e) { console.error("LS getObject error", e); return defaultValue; }
                },
                setObject: (key, value) => {
                    try { localStorage.setItem(key, JSON.stringify(value)); }
                    catch (e) { console.error("LS setObject error", e); if(errorMessage) errorMessage.textContent = "Failed to save settings."; }
                },
                remove: (key) => {
                    try { localStorage.removeItem(key); }
                    catch (e) { console.error("LS remove error", e); }
                }
            };

            // --- Dark Mode ---
            function applyDarkModePreference() {
                const isDarkMode = ls.getObject(DARK_MODE_KEY, false);
                if(darkModeToggle) darkModeToggle.checked = isDarkMode;
                document.body.classList.toggle('dark-mode', isDarkMode);
            }
            function toggleDarkMode() {
                const isDarkMode = darkModeToggle.checked;
                document.body.classList.toggle('dark-mode', isDarkMode);
                ls.setObject(DARK_MODE_KEY, isDarkMode);
            }

            // --- Recipe Management ---
            function getRecipes() {
                return ls.getObject(RECIPES_STORAGE_KEY, {});
            }
            function saveRecipes(recipes) {
                ls.setObject(RECIPES_STORAGE_KEY, recipes);
            }
            function populateRecipeDropdown() {
                if (!recipeSelect) return; // Exit if element doesn't exist
                const recipes = getRecipes();
                recipeSelect.innerHTML = '<option value="" disabled selected>-- Load or Delete Recipe --</option>'; // Clear existing

                // Add Presets
                const presetGroup = document.createElement('optgroup');
                presetGroup.label = "Presets";
                for (const name in PRESETS) {
                    if (name !== "Default") { // Don't list Default preset
                        const option = document.createElement('option');
                        option.value = `preset_${name}`; // Prefix to distinguish
                        option.textContent = name;
                        presetGroup.appendChild(option);
                    }
                }
                if (presetGroup.childElementCount > 0) {
                    recipeSelect.appendChild(presetGroup);
                }

                // Add User Recipes
                const userGroup = document.createElement('optgroup');
                userGroup.label = "My Recipes";
                const userRecipeNames = Object.keys(recipes).sort(); // Sort alphabetically
                userRecipeNames.forEach(name => {
                    const option = document.createElement('option');
                    option.value = name;
                    option.textContent = name;
                    userGroup.appendChild(option);
                });

                if (userGroup.childElementCount > 0) {
                    recipeSelect.appendChild(userGroup);
                }
                const hasOptions = presetGroup.childElementCount + userGroup.childElementCount > 0;
                recipeSelect.disabled = !hasOptions;
                if(loadRecipeBtn) loadRecipeBtn.disabled = !hasOptions;
                if(deleteRecipeBtn) deleteRecipeBtn.disabled = !hasOptions; // Disable delete too if empty
            }

            function saveCurrentRecipe() {
                if (!recipeNameInput || !errorMessage) return;
                const name = recipeNameInput.value.trim();
                if (!name) {
                    errorMessage.textContent = "Please enter a name for the recipe.";
                    recipeNameInput.focus();
                    return;
                }
                if (name.startsWith("preset_")) {
                    errorMessage.textContent = "Recipe name cannot start with 'preset_'.";
                    recipeNameInput.focus();
                    return;
                }

                const recipes = getRecipes();
                if (recipes[name] && !confirm(`Recipe "${name}" already exists. Overwrite?`)) {
                    return; // User cancelled overwrite
                }

                recipes[name] = {};
                inputIds.forEach(id => {
                    if (savableInputs[id]) { // Check if input exists
                        recipes[name][id] = savableInputs[id].value;
                    }
                });

                saveRecipes(recipes);
                populateRecipeDropdown(); // Update dropdown
                recipeNameInput.value = ''; // Clear input field
                errorMessage.textContent = `Recipe "${name}" saved.`;
                setTimeout(() => { if(errorMessage) errorMessage.textContent = ''; }, 3000); // Clear message after 3s
            }

            function loadSelectedRecipe() {
                if (!recipeSelect || !errorMessage) return;
                const selectedValue = recipeSelect.value;
                if (!selectedValue) return;

                let recipeData;
                let recipeDisplayName = selectedValue; // Default to user recipe name

                if (selectedValue.startsWith("preset_")) {
                    const presetName = selectedValue.substring(7); // Remove "preset_" prefix
                    recipeData = PRESETS[presetName];
                    recipeDisplayName = presetName; // Use clean name for messages
                } else {
                    const recipes = getRecipes();
                    recipeData = recipes[selectedValue];
                }


                if (recipeData) {
                    inputIds.forEach(id => {
                        if (savableInputs[id] && recipeData[id] !== undefined) { // Check if input exists
                            savableInputs[id].value = recipeData[id];
                            // IMPORTANT: Trigger input event to save loaded value to "last state" and recalculate
                            savableInputs[id].dispatchEvent(new Event('input'));
                        }
                    });
                    // calculateWeights(); // Recalculation is now handled by the triggered input events
                    errorMessage.textContent = `Recipe "${recipeDisplayName}" loaded.`;
                    setTimeout(() => { if(errorMessage) errorMessage.textContent = ''; }, 3000);
                } else {
                    errorMessage.textContent = "Could not load selected recipe data.";
                }
            }

            function deleteSelectedRecipe() {
                if (!recipeSelect || !errorMessage) return;
                const selectedValue = recipeSelect.value;
                if (!selectedValue || selectedValue.startsWith("preset_")) {
                    errorMessage.textContent = "Select a user-saved recipe to delete.";
                    return; // Cannot delete presets
                }

                if (confirm(`Are you sure you want to delete the recipe "${selectedValue}"?`)) {
                    const recipes = getRecipes();
                    delete recipes[selectedValue];
                    saveRecipes(recipes);
                    populateRecipeDropdown(); // Update dropdown
                    errorMessage.textContent = `Recipe "${selectedValue}" deleted.`;
                    setTimeout(() => { if(errorMessage) errorMessage.textContent = ''; }, 3000);
                }
            }

            // --- Scaling ---
            function scaleRecipe(type) {
                if (!scaleValueInput || !finalWeightInput || !scaleErrorMessage || !errorMessage) return;
                scaleErrorMessage.textContent = ''; // Clear previous scale errors
                errorMessage.textContent = ''; // Clear general errors too

                const scaleValue = parseFloat(scaleValueInput.value);
                const currentFinalWeight = evaluateMathExpression(finalWeightInput.value);

                if (isNaN(scaleValue) || scaleValue <= 0) {
                    scaleErrorMessage.textContent = "Please enter a valid positive number for scaling.";
                    scaleValueInput.focus();
                    return;
                }
                if (isNaN(currentFinalWeight) || currentFinalWeight <= 0) {
                    errorMessage.textContent = "Current Final Weight is invalid, cannot scale.";
                    finalWeightInput.focus();
                    return;
                }

                let newFinalWeight;

                if (type === 'factor') {
                    newFinalWeight = currentFinalWeight * scaleValue;
                } else if (type === 'total') {
                    newFinalWeight = scaleValue; // Target weight is the new final weight
                } else if (type === 'flour') {
                    const targetFlourWeight = scaleValue;
                    // Calculate current flour weight first
                    const currentPercentages = getCurrentPercentages();
                    if (currentPercentages.totalPercentage <= 0) {
                        errorMessage.textContent = "Cannot scale by flour: Invalid current percentages.";
                        return;
                    }
                    const currentWeightPerPercent = currentFinalWeight / currentPercentages.totalPercentage;
                    const currentFlourWeight = currentWeightPerPercent * 100; // Flour is 100%

                    if (currentFlourWeight <= 0) {
                        errorMessage.textContent = "Cannot scale by flour: Current flour weight is zero or negative.";
                        return;
                    }

                    const factor = targetFlourWeight / currentFlourWeight;
                    newFinalWeight = currentFinalWeight * factor;
                } else {
                    console.error("Unknown scaling type:", type);
                    return;
                }

                if (isFinite(newFinalWeight) && newFinalWeight > 0) {
                    // Update the input field. Use toFixed to avoid potential floating point artifacts becoming the new value
                    // Use more precision for potentially smaller scaled results
                    const precision = newFinalWeight < 10 ? 2 : 1;
                    finalWeightInput.value = newFinalWeight.toFixed(precision);
                    // Trigger calculation and saving of the new value
                    finalWeightInput.dispatchEvent(new Event('input'));
                    scaleValueInput.value = ''; // Clear scale input
                } else {
                    scaleErrorMessage.textContent = "Scaling resulted in an invalid weight (e.g., zero or negative).";
                }
            }

            // Helper to get current percentages for scaling by flour and calculation
            function getCurrentPercentages() {
                const hydration = parseFloat(hydrationInput?.value) || 0; // Use optional chaining
                const yeast = parseFloat(yeastInput?.value) || 0;
                const salt = parseFloat(saltInput?.value) || 0;
                const sugar = parseFloat(sugarInput?.value) || 0;
                const fat = parseFloat(fatInput?.value) || 0;
                const totalPercentage = 100 + hydration + yeast + salt + sugar + fat;
                return { hydration, yeast, salt, sugar, fat, totalPercentage };
            }


            // --- Reset Form ---
            function resetForm() {
                if (!errorMessage) return;
                if (confirm("Reset all fields to default values? This will clear current inputs.")) {
                    const defaultValues = PRESETS["Default"];
                    inputIds.forEach(id => {
                        if (savableInputs[id]) { // Check if input exists
                            savableInputs[id].value = defaultValues[id] !== undefined ? defaultValues[id] : '';
                            // Trigger input event to save default value and recalculate
                            savableInputs[id].dispatchEvent(new Event('input'));
                        }
                    });
                    errorMessage.textContent = "Fields reset to defaults.";
                    setTimeout(() => { if(errorMessage) errorMessage.textContent = ''; }, 3000);
                }
            }

            // --- Math Evaluation ---
            function evaluateMathExpression(expression) {
                if (!expression || typeof expression !== 'string') return NaN;
                const expr = expression.trim();
                if (expr === '') return NaN;
                // Updated regex: allow leading/trailing spaces, ensure basic safety
                // Allows numbers, decimals, (), +, -, *, / and spaces between them.
                const allowedCharsRegex = /^\s*[\d\s().+\-*/]+\s*$/;
                if (!allowedCharsRegex.test(expr)) {
                    console.warn("Invalid chars in expression:", expr);
                    return NaN;
                }
                // Basic check against potentially harmful patterns (though Function is sandboxed)
                if (/[^0-9().+\-*/\s]/.test(expr.replace(/\s+/g, ''))) {
                    console.warn("Potentially unsafe expression blocked:", expr);
                    return NaN;
                }

                try {
                    // Using Function constructor is generally safer than eval for this controlled input
                    const calculate = new Function('return ' + expr);
                    const result = calculate();
                    // Check if the result is a valid, finite number
                    return (typeof result === 'number' && isFinite(result)) ? result : NaN;
                } catch (error) {
                    console.error("Calculation error:", expr, error);
                    return NaN;
                }
            }

            // --- **NEW**: Helper Function to Highlight Results ---
            function highlightResultSpan(spanElement) {
                if (!spanElement) return;
                spanElement.classList.add('highlight-update');
                // Remove the class after the animation duration (adjust timing if needed)
                setTimeout(() => {
                    spanElement.classList.remove('highlight-update');
                }, 500); // Should roughly match transition duration
            }
            // --- End New ---

            // --- Core Calculation Logic ---
            function calculateWeights() {
                if (!errorMessage) return; // Check if error element exists
                errorMessage.textContent = ''; // Clear previous calculation errors
                scaleErrorMessage.textContent = ''; // Clear scale errors too

                const finalWeightString = finalWeightInput?.value; // Use optional chaining
                const finalWeight = evaluateMathExpression(finalWeightString);
                const percentages = getCurrentPercentages();

                // Validation
                let error = false;
                if (isNaN(finalWeight)) { errorMessage.textContent = 'Invalid Final Weight format (e.g., use 1000 or 5*200).'; error = true; }
                else if (finalWeight <= 0) { errorMessage.textContent = 'Final Weight must be greater than 0.'; error = true; }
                else if (percentages.hydration < 0 || percentages.yeast < 0 || percentages.salt < 0 || percentages.sugar < 0 || percentages.fat < 0) { errorMessage.textContent = 'Percentages cannot be negative.'; error = true; }
                else if (percentages.totalPercentage <= 0) { // Check if total % is zero or negative
                    errorMessage.textContent = 'Total percentage cannot be zero or negative.'; error = true;
                }


                if (error) {
                    resetResultsDisplay(false); // Reset display without highlighting
                    return; // Stop calculation
                }

                // Calculation
                const effectiveTotalPercentage = percentages.totalPercentage; // Already calculated
                const weightPerPercent = finalWeight / effectiveTotalPercentage;
                const flourWeight = weightPerPercent * 100;
                const waterWeight = weightPerPercent * percentages.hydration;
                const yeastWeight = weightPerPercent * percentages.yeast;
                const saltWeight = weightPerPercent * percentages.salt;
                const sugarWeight = weightPerPercent * percentages.sugar;
                const fatWeight = weightPerPercent * percentages.fat;

                // Display Results & Highlight
                updateResultSpan(flourWeightSpan, flourWeight.toFixed(1));
                updateResultSpan(waterWeightSpan, waterWeight.toFixed(1));
                updateResultSpan(yeastWeightSpan, yeastWeight.toFixed(2)); // More precision for yeast
                updateResultSpan(saltWeightSpan, saltWeight.toFixed(1));
                updateResultSpan(sugarWeightSpan, sugarWeight.toFixed(1));
                updateResultSpan(fatWeightSpan, fatWeight.toFixed(1));
                updateResultSpan(totalPercentageSpan, percentages.totalPercentage.toFixed(1));
                const calculatedTotal = flourWeight + waterWeight + yeastWeight + saltWeight + sugarWeight + fatWeight;
                updateResultSpan(calculatedTotalWeightSpan, calculatedTotal.toFixed(1));
            }

            // Helper to update span and trigger highlight
            function updateResultSpan(span, value) {
                if (span && span.textContent !== value) { // Only update and highlight if value changed
                    span.textContent = value;
                    highlightResultSpan(span);
                } else if (span) {
                    // Ensure content is set even if not changed (e.g., initial load)
                    span.textContent = value;
                }
            }

            // --- Reset Results Display Only ---
            function resetResultsDisplay(shouldHighlight = false) { // Add parameter
                const defaultValue = '-';
                if (shouldHighlight) {
                    updateResultSpan(flourWeightSpan, defaultValue);
                    updateResultSpan(waterWeightSpan, defaultValue);
                    updateResultSpan(yeastWeightSpan, defaultValue);
                    updateResultSpan(saltWeightSpan, defaultValue);
                    updateResultSpan(sugarWeightSpan, defaultValue);
                    updateResultSpan(fatWeightSpan, defaultValue);
                    updateResultSpan(totalPercentageSpan, defaultValue);
                    updateResultSpan(calculatedTotalWeightSpan, defaultValue);
                } else {
                    // Just reset text without highlighting animation
                    resultSpans.forEach(span => { if(span) span.textContent = defaultValue; });
                }
            }

            // --- Load Last Input State ---
            function loadLastInputValues() {
                inputIds.forEach(id => {
                    if (savableInputs[id]) { // Check if input exists
                        const savedValue = ls.get(id); // Use simple get for last state
                        if (savedValue !== null) {
                            savableInputs[id].value = savedValue;
                        }
                    }
                });
            }

            // --- Event Listeners Setup ---
            function setupEventListeners() {
                // Input fields: Calculate and save last state on input
                inputIds.forEach(id => {
                    if (savableInputs[id]) { // Check if input exists
                        savableInputs[id].addEventListener('input', () => {
                            calculateWeights();
                            ls.set(id, savableInputs[id].value); // Save current value as last state
                        });
                    }
                });

                // Dark Mode
                if(darkModeToggle) darkModeToggle.addEventListener('change', toggleDarkMode);

                // Reset
                if(resetBtn) resetBtn.addEventListener('click', resetForm);

                // Recipe Management
                if(saveRecipeBtn) saveRecipeBtn.addEventListener('click', saveCurrentRecipe);
                if(loadRecipeBtn) loadRecipeBtn.addEventListener('click', loadSelectedRecipe);
                if(deleteRecipeBtn) deleteRecipeBtn.addEventListener('click', deleteSelectedRecipe);

                // Scaling
                if(scaleByFactorBtn) scaleByFactorBtn.addEventListener('click', () => scaleRecipe('factor'));
                if(scaleToTotalBtn) scaleToTotalBtn.addEventListener('click', () => scaleRecipe('total'));
                if(scaleToFlourBtn) scaleToFlourBtn.addEventListener('click', () => scaleRecipe('flour'));
            }

            // --- Initialization ---
            applyDarkModePreference();
            populateRecipeDropdown();
            loadLastInputValues(); // Load last entered values AFTER populating dropdowns etc.
            setupEventListeners();
            calculateWeights(); // Perform initial calculation (without highlight on load)

        });
        // --- JavaScript Ends ---
    </script>

</body>
</html>